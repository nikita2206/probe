name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: context.ref.replace('refs/tags/', ''),
              body: 'Release ' + context.ref.replace('refs/tags/', ''),
              draft: false,
              prerelease: false
            });
            return data.id;

  build-release:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: probe-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: probe-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: probe-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: probe-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: probe-windows-x86_64
            ext: .exe

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/probe dist/
        tar -czf ${{ matrix.name }}.tar.gz -C dist .
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist
        cp target/${{ matrix.target }}/release/probe.exe dist/
        Compress-Archive -Path dist/* -DestinationPath ${{ matrix.name }}.zip

    - name: Upload release asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: '${{ matrix.name }}.tar.gz',
            data: fs.readFileSync('${{ matrix.name }}.tar.gz')
          });
          
    - name: Upload release asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: '${{ matrix.name }}.zip',
            data: fs.readFileSync('${{ matrix.name }}.zip')
          });